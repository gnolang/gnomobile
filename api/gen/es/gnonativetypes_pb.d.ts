// @generated by protoc-gen-es v2.0.0
// @generated from file gnonativetypes.proto (package land.gno.gnonative.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file gnonativetypes.proto.
 */
export declare const file_gnonativetypes: GenFile;

/**
 * messages
 *
 * @generated from message land.gno.gnonative.v1.SetRemoteRequest
 */
export declare type SetRemoteRequest = Message<"land.gno.gnonative.v1.SetRemoteRequest"> & {
  /**
   * @generated from field: string remote = 1;
   */
  remote: string;
};

/**
 * Describes the message land.gno.gnonative.v1.SetRemoteRequest.
 * Use `create(SetRemoteRequestSchema)` to create a new message.
 */
export declare const SetRemoteRequestSchema: GenMessage<SetRemoteRequest>;

/**
 * @generated from message land.gno.gnonative.v1.SetRemoteResponse
 */
export declare type SetRemoteResponse = Message<"land.gno.gnonative.v1.SetRemoteResponse"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.SetRemoteResponse.
 * Use `create(SetRemoteResponseSchema)` to create a new message.
 */
export declare const SetRemoteResponseSchema: GenMessage<SetRemoteResponse>;

/**
 * @generated from message land.gno.gnonative.v1.GetRemoteRequest
 */
export declare type GetRemoteRequest = Message<"land.gno.gnonative.v1.GetRemoteRequest"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.GetRemoteRequest.
 * Use `create(GetRemoteRequestSchema)` to create a new message.
 */
export declare const GetRemoteRequestSchema: GenMessage<GetRemoteRequest>;

/**
 * @generated from message land.gno.gnonative.v1.GetRemoteResponse
 */
export declare type GetRemoteResponse = Message<"land.gno.gnonative.v1.GetRemoteResponse"> & {
  /**
   * @generated from field: string remote = 1;
   */
  remote: string;
};

/**
 * Describes the message land.gno.gnonative.v1.GetRemoteResponse.
 * Use `create(GetRemoteResponseSchema)` to create a new message.
 */
export declare const GetRemoteResponseSchema: GenMessage<GetRemoteResponse>;

/**
 * @generated from message land.gno.gnonative.v1.SetChainIDRequest
 */
export declare type SetChainIDRequest = Message<"land.gno.gnonative.v1.SetChainIDRequest"> & {
  /**
   * @generated from field: string chain_id = 1;
   */
  chainId: string;
};

/**
 * Describes the message land.gno.gnonative.v1.SetChainIDRequest.
 * Use `create(SetChainIDRequestSchema)` to create a new message.
 */
export declare const SetChainIDRequestSchema: GenMessage<SetChainIDRequest>;

/**
 * @generated from message land.gno.gnonative.v1.SetChainIDResponse
 */
export declare type SetChainIDResponse = Message<"land.gno.gnonative.v1.SetChainIDResponse"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.SetChainIDResponse.
 * Use `create(SetChainIDResponseSchema)` to create a new message.
 */
export declare const SetChainIDResponseSchema: GenMessage<SetChainIDResponse>;

/**
 * @generated from message land.gno.gnonative.v1.GetChainIDRequest
 */
export declare type GetChainIDRequest = Message<"land.gno.gnonative.v1.GetChainIDRequest"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.GetChainIDRequest.
 * Use `create(GetChainIDRequestSchema)` to create a new message.
 */
export declare const GetChainIDRequestSchema: GenMessage<GetChainIDRequest>;

/**
 * @generated from message land.gno.gnonative.v1.GetChainIDResponse
 */
export declare type GetChainIDResponse = Message<"land.gno.gnonative.v1.GetChainIDResponse"> & {
  /**
   * @generated from field: string chain_id = 1;
   */
  chainId: string;
};

/**
 * Describes the message land.gno.gnonative.v1.GetChainIDResponse.
 * Use `create(GetChainIDResponseSchema)` to create a new message.
 */
export declare const GetChainIDResponseSchema: GenMessage<GetChainIDResponse>;

/**
 * @generated from message land.gno.gnonative.v1.SetPasswordRequest
 */
export declare type SetPasswordRequest = Message<"land.gno.gnonative.v1.SetPasswordRequest"> & {
  /**
   * @generated from field: string password = 1;
   */
  password: string;
};

/**
 * Describes the message land.gno.gnonative.v1.SetPasswordRequest.
 * Use `create(SetPasswordRequestSchema)` to create a new message.
 */
export declare const SetPasswordRequestSchema: GenMessage<SetPasswordRequest>;

/**
 * @generated from message land.gno.gnonative.v1.SetPasswordResponse
 */
export declare type SetPasswordResponse = Message<"land.gno.gnonative.v1.SetPasswordResponse"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.SetPasswordResponse.
 * Use `create(SetPasswordResponseSchema)` to create a new message.
 */
export declare const SetPasswordResponseSchema: GenMessage<SetPasswordResponse>;

/**
 * @generated from message land.gno.gnonative.v1.UpdatePasswordRequest
 */
export declare type UpdatePasswordRequest = Message<"land.gno.gnonative.v1.UpdatePasswordRequest"> & {
  /**
   * @generated from field: string new_password = 1;
   */
  newPassword: string;
};

/**
 * Describes the message land.gno.gnonative.v1.UpdatePasswordRequest.
 * Use `create(UpdatePasswordRequestSchema)` to create a new message.
 */
export declare const UpdatePasswordRequestSchema: GenMessage<UpdatePasswordRequest>;

/**
 * @generated from message land.gno.gnonative.v1.UpdatePasswordResponse
 */
export declare type UpdatePasswordResponse = Message<"land.gno.gnonative.v1.UpdatePasswordResponse"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.UpdatePasswordResponse.
 * Use `create(UpdatePasswordResponseSchema)` to create a new message.
 */
export declare const UpdatePasswordResponseSchema: GenMessage<UpdatePasswordResponse>;

/**
 * @generated from message land.gno.gnonative.v1.GenerateRecoveryPhraseRequest
 */
export declare type GenerateRecoveryPhraseRequest = Message<"land.gno.gnonative.v1.GenerateRecoveryPhraseRequest"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.GenerateRecoveryPhraseRequest.
 * Use `create(GenerateRecoveryPhraseRequestSchema)` to create a new message.
 */
export declare const GenerateRecoveryPhraseRequestSchema: GenMessage<GenerateRecoveryPhraseRequest>;

/**
 * @generated from message land.gno.gnonative.v1.GenerateRecoveryPhraseResponse
 */
export declare type GenerateRecoveryPhraseResponse = Message<"land.gno.gnonative.v1.GenerateRecoveryPhraseResponse"> & {
  /**
   * @generated from field: string phrase = 1;
   */
  phrase: string;
};

/**
 * Describes the message land.gno.gnonative.v1.GenerateRecoveryPhraseResponse.
 * Use `create(GenerateRecoveryPhraseResponseSchema)` to create a new message.
 */
export declare const GenerateRecoveryPhraseResponseSchema: GenMessage<GenerateRecoveryPhraseResponse>;

/**
 * @generated from message land.gno.gnonative.v1.KeyInfo
 */
export declare type KeyInfo = Message<"land.gno.gnonative.v1.KeyInfo"> & {
  /**
   * 0: local, 1: ledger, 2: offline, 3: multi
   *
   * @generated from field: uint32 type = 1;
   */
  type: number;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: bytes pub_key = 3;
   */
  pubKey: Uint8Array;

  /**
   * @generated from field: bytes address = 4;
   */
  address: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.KeyInfo.
 * Use `create(KeyInfoSchema)` to create a new message.
 */
export declare const KeyInfoSchema: GenMessage<KeyInfo>;

/**
 * Coin holds some amount of one currency.
 * A negative amount is invalid.
 *
 * @generated from message land.gno.gnonative.v1.Coin
 */
export declare type Coin = Message<"land.gno.gnonative.v1.Coin"> & {
  /**
   * @generated from field: string denom = 1;
   */
  denom: string;

  /**
   * @generated from field: sint64 amount = 2;
   */
  amount: bigint;
};

/**
 * Describes the message land.gno.gnonative.v1.Coin.
 * Use `create(CoinSchema)` to create a new message.
 */
export declare const CoinSchema: GenMessage<Coin>;

/**
 * @generated from message land.gno.gnonative.v1.BaseAccount
 */
export declare type BaseAccount = Message<"land.gno.gnonative.v1.BaseAccount"> & {
  /**
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;

  /**
   * @generated from field: repeated land.gno.gnonative.v1.Coin coins = 2;
   */
  coins: Coin[];

  /**
   * @generated from field: bytes pub_key = 3;
   */
  pubKey: Uint8Array;

  /**
   * @generated from field: uint64 account_number = 4;
   */
  accountNumber: bigint;

  /**
   * @generated from field: uint64 sequence = 5;
   */
  sequence: bigint;
};

/**
 * Describes the message land.gno.gnonative.v1.BaseAccount.
 * Use `create(BaseAccountSchema)` to create a new message.
 */
export declare const BaseAccountSchema: GenMessage<BaseAccount>;

/**
 * @generated from message land.gno.gnonative.v1.ListKeyInfoRequest
 */
export declare type ListKeyInfoRequest = Message<"land.gno.gnonative.v1.ListKeyInfoRequest"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.ListKeyInfoRequest.
 * Use `create(ListKeyInfoRequestSchema)` to create a new message.
 */
export declare const ListKeyInfoRequestSchema: GenMessage<ListKeyInfoRequest>;

/**
 * @generated from message land.gno.gnonative.v1.ListKeyInfoResponse
 */
export declare type ListKeyInfoResponse = Message<"land.gno.gnonative.v1.ListKeyInfoResponse"> & {
  /**
   * @generated from field: repeated land.gno.gnonative.v1.KeyInfo keys = 1 [json_name = "key_info"];
   */
  keys: KeyInfo[];
};

/**
 * Describes the message land.gno.gnonative.v1.ListKeyInfoResponse.
 * Use `create(ListKeyInfoResponseSchema)` to create a new message.
 */
export declare const ListKeyInfoResponseSchema: GenMessage<ListKeyInfoResponse>;

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByNameRequest
 */
export declare type HasKeyByNameRequest = Message<"land.gno.gnonative.v1.HasKeyByNameRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message land.gno.gnonative.v1.HasKeyByNameRequest.
 * Use `create(HasKeyByNameRequestSchema)` to create a new message.
 */
export declare const HasKeyByNameRequestSchema: GenMessage<HasKeyByNameRequest>;

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByNameResponse
 */
export declare type HasKeyByNameResponse = Message<"land.gno.gnonative.v1.HasKeyByNameResponse"> & {
  /**
   * @generated from field: bool has = 1;
   */
  has: boolean;
};

/**
 * Describes the message land.gno.gnonative.v1.HasKeyByNameResponse.
 * Use `create(HasKeyByNameResponseSchema)` to create a new message.
 */
export declare const HasKeyByNameResponseSchema: GenMessage<HasKeyByNameResponse>;

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByAddressRequest
 */
export declare type HasKeyByAddressRequest = Message<"land.gno.gnonative.v1.HasKeyByAddressRequest"> & {
  /**
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.HasKeyByAddressRequest.
 * Use `create(HasKeyByAddressRequestSchema)` to create a new message.
 */
export declare const HasKeyByAddressRequestSchema: GenMessage<HasKeyByAddressRequest>;

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByAddressResponse
 */
export declare type HasKeyByAddressResponse = Message<"land.gno.gnonative.v1.HasKeyByAddressResponse"> & {
  /**
   * @generated from field: bool has = 1;
   */
  has: boolean;
};

/**
 * Describes the message land.gno.gnonative.v1.HasKeyByAddressResponse.
 * Use `create(HasKeyByAddressResponseSchema)` to create a new message.
 */
export declare const HasKeyByAddressResponseSchema: GenMessage<HasKeyByAddressResponse>;

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByNameOrAddressRequest
 */
export declare type HasKeyByNameOrAddressRequest = Message<"land.gno.gnonative.v1.HasKeyByNameOrAddressRequest"> & {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32: string;
};

/**
 * Describes the message land.gno.gnonative.v1.HasKeyByNameOrAddressRequest.
 * Use `create(HasKeyByNameOrAddressRequestSchema)` to create a new message.
 */
export declare const HasKeyByNameOrAddressRequestSchema: GenMessage<HasKeyByNameOrAddressRequest>;

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByNameOrAddressResponse
 */
export declare type HasKeyByNameOrAddressResponse = Message<"land.gno.gnonative.v1.HasKeyByNameOrAddressResponse"> & {
  /**
   * @generated from field: bool has = 1;
   */
  has: boolean;
};

/**
 * Describes the message land.gno.gnonative.v1.HasKeyByNameOrAddressResponse.
 * Use `create(HasKeyByNameOrAddressResponseSchema)` to create a new message.
 */
export declare const HasKeyByNameOrAddressResponseSchema: GenMessage<HasKeyByNameOrAddressResponse>;

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByNameRequest
 */
export declare type GetKeyInfoByNameRequest = Message<"land.gno.gnonative.v1.GetKeyInfoByNameRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message land.gno.gnonative.v1.GetKeyInfoByNameRequest.
 * Use `create(GetKeyInfoByNameRequestSchema)` to create a new message.
 */
export declare const GetKeyInfoByNameRequestSchema: GenMessage<GetKeyInfoByNameRequest>;

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByNameResponse
 */
export declare type GetKeyInfoByNameResponse = Message<"land.gno.gnonative.v1.GetKeyInfoByNameResponse"> & {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;
};

/**
 * Describes the message land.gno.gnonative.v1.GetKeyInfoByNameResponse.
 * Use `create(GetKeyInfoByNameResponseSchema)` to create a new message.
 */
export declare const GetKeyInfoByNameResponseSchema: GenMessage<GetKeyInfoByNameResponse>;

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByAddressRequest
 */
export declare type GetKeyInfoByAddressRequest = Message<"land.gno.gnonative.v1.GetKeyInfoByAddressRequest"> & {
  /**
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.GetKeyInfoByAddressRequest.
 * Use `create(GetKeyInfoByAddressRequestSchema)` to create a new message.
 */
export declare const GetKeyInfoByAddressRequestSchema: GenMessage<GetKeyInfoByAddressRequest>;

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByAddressResponse
 */
export declare type GetKeyInfoByAddressResponse = Message<"land.gno.gnonative.v1.GetKeyInfoByAddressResponse"> & {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;
};

/**
 * Describes the message land.gno.gnonative.v1.GetKeyInfoByAddressResponse.
 * Use `create(GetKeyInfoByAddressResponseSchema)` to create a new message.
 */
export declare const GetKeyInfoByAddressResponseSchema: GenMessage<GetKeyInfoByAddressResponse>;

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByNameOrAddressRequest
 */
export declare type GetKeyInfoByNameOrAddressRequest = Message<"land.gno.gnonative.v1.GetKeyInfoByNameOrAddressRequest"> & {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32: string;
};

/**
 * Describes the message land.gno.gnonative.v1.GetKeyInfoByNameOrAddressRequest.
 * Use `create(GetKeyInfoByNameOrAddressRequestSchema)` to create a new message.
 */
export declare const GetKeyInfoByNameOrAddressRequestSchema: GenMessage<GetKeyInfoByNameOrAddressRequest>;

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByNameOrAddressResponse
 */
export declare type GetKeyInfoByNameOrAddressResponse = Message<"land.gno.gnonative.v1.GetKeyInfoByNameOrAddressResponse"> & {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;
};

/**
 * Describes the message land.gno.gnonative.v1.GetKeyInfoByNameOrAddressResponse.
 * Use `create(GetKeyInfoByNameOrAddressResponseSchema)` to create a new message.
 */
export declare const GetKeyInfoByNameOrAddressResponseSchema: GenMessage<GetKeyInfoByNameOrAddressResponse>;

/**
 * @generated from message land.gno.gnonative.v1.CreateAccountRequest
 */
export declare type CreateAccountRequest = Message<"land.gno.gnonative.v1.CreateAccountRequest"> & {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32: string;

  /**
   * @generated from field: string mnemonic = 2;
   */
  mnemonic: string;

  /**
   * @generated from field: string bip39_passwd = 3;
   */
  bip39Passwd: string;

  /**
   * @generated from field: string password = 4;
   */
  password: string;

  /**
   * @generated from field: uint32 account = 5;
   */
  account: number;

  /**
   * @generated from field: uint32 index = 6;
   */
  index: number;
};

/**
 * Describes the message land.gno.gnonative.v1.CreateAccountRequest.
 * Use `create(CreateAccountRequestSchema)` to create a new message.
 */
export declare const CreateAccountRequestSchema: GenMessage<CreateAccountRequest>;

/**
 * @generated from message land.gno.gnonative.v1.CreateAccountResponse
 */
export declare type CreateAccountResponse = Message<"land.gno.gnonative.v1.CreateAccountResponse"> & {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;
};

/**
 * Describes the message land.gno.gnonative.v1.CreateAccountResponse.
 * Use `create(CreateAccountResponseSchema)` to create a new message.
 */
export declare const CreateAccountResponseSchema: GenMessage<CreateAccountResponse>;

/**
 * @generated from message land.gno.gnonative.v1.SelectAccountRequest
 */
export declare type SelectAccountRequest = Message<"land.gno.gnonative.v1.SelectAccountRequest"> & {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32: string;
};

/**
 * Describes the message land.gno.gnonative.v1.SelectAccountRequest.
 * Use `create(SelectAccountRequestSchema)` to create a new message.
 */
export declare const SelectAccountRequestSchema: GenMessage<SelectAccountRequest>;

/**
 * @generated from message land.gno.gnonative.v1.SelectAccountResponse
 */
export declare type SelectAccountResponse = Message<"land.gno.gnonative.v1.SelectAccountResponse"> & {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;

  /**
   * True if the password has been set. If false, then call SetPassword.
   *
   * @generated from field: bool has_password = 2;
   */
  hasPassword: boolean;
};

/**
 * Describes the message land.gno.gnonative.v1.SelectAccountResponse.
 * Use `create(SelectAccountResponseSchema)` to create a new message.
 */
export declare const SelectAccountResponseSchema: GenMessage<SelectAccountResponse>;

/**
 * @generated from message land.gno.gnonative.v1.GetActiveAccountRequest
 */
export declare type GetActiveAccountRequest = Message<"land.gno.gnonative.v1.GetActiveAccountRequest"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.GetActiveAccountRequest.
 * Use `create(GetActiveAccountRequestSchema)` to create a new message.
 */
export declare const GetActiveAccountRequestSchema: GenMessage<GetActiveAccountRequest>;

/**
 * @generated from message land.gno.gnonative.v1.GetActiveAccountResponse
 */
export declare type GetActiveAccountResponse = Message<"land.gno.gnonative.v1.GetActiveAccountResponse"> & {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;

  /**
   * True if the password has been set. If false, then call SetPassword.
   *
   * @generated from field: bool has_password = 2;
   */
  hasPassword: boolean;
};

/**
 * Describes the message land.gno.gnonative.v1.GetActiveAccountResponse.
 * Use `create(GetActiveAccountResponseSchema)` to create a new message.
 */
export declare const GetActiveAccountResponseSchema: GenMessage<GetActiveAccountResponse>;

/**
 * @generated from message land.gno.gnonative.v1.QueryAccountRequest
 */
export declare type QueryAccountRequest = Message<"land.gno.gnonative.v1.QueryAccountRequest"> & {
  /**
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.QueryAccountRequest.
 * Use `create(QueryAccountRequestSchema)` to create a new message.
 */
export declare const QueryAccountRequestSchema: GenMessage<QueryAccountRequest>;

/**
 * @generated from message land.gno.gnonative.v1.QueryAccountResponse
 */
export declare type QueryAccountResponse = Message<"land.gno.gnonative.v1.QueryAccountResponse"> & {
  /**
   * @generated from field: land.gno.gnonative.v1.BaseAccount account_info = 1;
   */
  accountInfo?: BaseAccount;
};

/**
 * Describes the message land.gno.gnonative.v1.QueryAccountResponse.
 * Use `create(QueryAccountResponseSchema)` to create a new message.
 */
export declare const QueryAccountResponseSchema: GenMessage<QueryAccountResponse>;

/**
 * @generated from message land.gno.gnonative.v1.DeleteAccountRequest
 */
export declare type DeleteAccountRequest = Message<"land.gno.gnonative.v1.DeleteAccountRequest"> & {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32: string;

  /**
   * @generated from field: string password = 2;
   */
  password: string;

  /**
   * @generated from field: bool skip_password = 3;
   */
  skipPassword: boolean;
};

/**
 * Describes the message land.gno.gnonative.v1.DeleteAccountRequest.
 * Use `create(DeleteAccountRequestSchema)` to create a new message.
 */
export declare const DeleteAccountRequestSchema: GenMessage<DeleteAccountRequest>;

/**
 * @generated from message land.gno.gnonative.v1.DeleteAccountResponse
 */
export declare type DeleteAccountResponse = Message<"land.gno.gnonative.v1.DeleteAccountResponse"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.DeleteAccountResponse.
 * Use `create(DeleteAccountResponseSchema)` to create a new message.
 */
export declare const DeleteAccountResponseSchema: GenMessage<DeleteAccountResponse>;

/**
 * @generated from message land.gno.gnonative.v1.QueryRequest
 */
export declare type QueryRequest = Message<"land.gno.gnonative.v1.QueryRequest"> & {
  /**
   * Example: "vm/qrender"
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * Example: "gno.land/r/demo/boards\ntestboard"
   *
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.QueryRequest.
 * Use `create(QueryRequestSchema)` to create a new message.
 */
export declare const QueryRequestSchema: GenMessage<QueryRequest>;

/**
 * @generated from message land.gno.gnonative.v1.QueryResponse
 */
export declare type QueryResponse = Message<"land.gno.gnonative.v1.QueryResponse"> & {
  /**
   * @generated from field: bytes result = 1;
   */
  result: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.QueryResponse.
 * Use `create(QueryResponseSchema)` to create a new message.
 */
export declare const QueryResponseSchema: GenMessage<QueryResponse>;

/**
 * @generated from message land.gno.gnonative.v1.RenderRequest
 */
export declare type RenderRequest = Message<"land.gno.gnonative.v1.RenderRequest"> & {
  /**
   * Example: "gno.land/r/demo/boards"
   *
   * @generated from field: string package_path = 1;
   */
  packagePath: string;

  /**
   * Example: "testboard/1"
   *
   * @generated from field: string args = 2;
   */
  args: string;
};

/**
 * Describes the message land.gno.gnonative.v1.RenderRequest.
 * Use `create(RenderRequestSchema)` to create a new message.
 */
export declare const RenderRequestSchema: GenMessage<RenderRequest>;

/**
 * @generated from message land.gno.gnonative.v1.RenderResponse
 */
export declare type RenderResponse = Message<"land.gno.gnonative.v1.RenderResponse"> & {
  /**
   * The Render function result (typically markdown)
   *
   * @generated from field: string result = 1;
   */
  result: string;
};

/**
 * Describes the message land.gno.gnonative.v1.RenderResponse.
 * Use `create(RenderResponseSchema)` to create a new message.
 */
export declare const RenderResponseSchema: GenMessage<RenderResponse>;

/**
 * @generated from message land.gno.gnonative.v1.QEvalRequest
 */
export declare type QEvalRequest = Message<"land.gno.gnonative.v1.QEvalRequest"> & {
  /**
   * Example: "gno.land/r/demo/boards"
   *
   * @generated from field: string package_path = 1;
   */
  packagePath: string;

  /**
   * Example: "GetBoardIDFromName(\"testboard\")"
   *
   * @generated from field: string expression = 2;
   */
  expression: string;
};

/**
 * Describes the message land.gno.gnonative.v1.QEvalRequest.
 * Use `create(QEvalRequestSchema)` to create a new message.
 */
export declare const QEvalRequestSchema: GenMessage<QEvalRequest>;

/**
 * @generated from message land.gno.gnonative.v1.QEvalResponse
 */
export declare type QEvalResponse = Message<"land.gno.gnonative.v1.QEvalResponse"> & {
  /**
   * A typed expression like "(1 gno.land/r/demo/boards.BoardID)\n(true bool)"
   *
   * @generated from field: string result = 1;
   */
  result: string;
};

/**
 * Describes the message land.gno.gnonative.v1.QEvalResponse.
 * Use `create(QEvalResponseSchema)` to create a new message.
 */
export declare const QEvalResponseSchema: GenMessage<QEvalResponse>;

/**
 * @generated from message land.gno.gnonative.v1.MsgCall
 */
export declare type MsgCall = Message<"land.gno.gnonative.v1.MsgCall"> & {
  /**
   * Example: "gno.land/r/demo/boards"
   *
   * @generated from field: string package_path = 1;
   */
  packagePath: string;

  /**
   * Example: "CreateReply"
   *
   * @generated from field: string fnc = 2;
   */
  fnc: string;

  /**
   * list of arguments specific to the function
   * Example: ["1", "1", "2", "my reply"]
   *
   * @generated from field: repeated string args = 3;
   */
  args: string[];

  /**
   * @generated from field: string send = 4;
   */
  send: string;
};

/**
 * Describes the message land.gno.gnonative.v1.MsgCall.
 * Use `create(MsgCallSchema)` to create a new message.
 */
export declare const MsgCallSchema: GenMessage<MsgCall>;

/**
 * @generated from message land.gno.gnonative.v1.CallRequest
 */
export declare type CallRequest = Message<"land.gno.gnonative.v1.CallRequest"> & {
  /**
   * @generated from field: string gas_fee = 1;
   */
  gasFee: string;

  /**
   * @generated from field: sint64 gas_wanted = 2;
   */
  gasWanted: bigint;

  /**
   * @generated from field: string memo = 3;
   */
  memo: string;

  /**
   * If CallerAddress is empty then get it from the active account
   *
   * @generated from field: bytes caller_address = 4;
   */
  callerAddress: Uint8Array;

  /**
   * list of calls to make in one transaction
   *
   * @generated from field: repeated land.gno.gnonative.v1.MsgCall msgs = 5 [json_name = "Msgs"];
   */
  msgs: MsgCall[];
};

/**
 * Describes the message land.gno.gnonative.v1.CallRequest.
 * Use `create(CallRequestSchema)` to create a new message.
 */
export declare const CallRequestSchema: GenMessage<CallRequest>;

/**
 * @generated from message land.gno.gnonative.v1.CallResponse
 */
export declare type CallResponse = Message<"land.gno.gnonative.v1.CallResponse"> & {
  /**
   * @generated from field: bytes result = 1;
   */
  result: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.CallResponse.
 * Use `create(CallResponseSchema)` to create a new message.
 */
export declare const CallResponseSchema: GenMessage<CallResponse>;

/**
 * @generated from message land.gno.gnonative.v1.MsgSend
 */
export declare type MsgSend = Message<"land.gno.gnonative.v1.MsgSend"> & {
  /**
   * Example: The response of calling AddressFromBech32 with
   * "g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh"
   *
   * @generated from field: bytes to_address = 1;
   */
  toAddress: Uint8Array;

  /**
   * Example: "1000ugnot"
   *
   * @generated from field: string send = 2;
   */
  send: string;
};

/**
 * Describes the message land.gno.gnonative.v1.MsgSend.
 * Use `create(MsgSendSchema)` to create a new message.
 */
export declare const MsgSendSchema: GenMessage<MsgSend>;

/**
 * @generated from message land.gno.gnonative.v1.SendRequest
 */
export declare type SendRequest = Message<"land.gno.gnonative.v1.SendRequest"> & {
  /**
   * @generated from field: string gas_fee = 1;
   */
  gasFee: string;

  /**
   * @generated from field: sint64 gas_wanted = 2;
   */
  gasWanted: bigint;

  /**
   * Memo is optional
   *
   * @generated from field: string memo = 3;
   */
  memo: string;

  /**
   * If CallerAddress is empty then get it from the active account
   *
   * @generated from field: bytes caller_address = 4;
   */
  callerAddress: Uint8Array;

  /**
   * list of send operations to make in one transaction
   *
   * @generated from field: repeated land.gno.gnonative.v1.MsgSend msgs = 5 [json_name = "Msgs"];
   */
  msgs: MsgSend[];
};

/**
 * Describes the message land.gno.gnonative.v1.SendRequest.
 * Use `create(SendRequestSchema)` to create a new message.
 */
export declare const SendRequestSchema: GenMessage<SendRequest>;

/**
 * @generated from message land.gno.gnonative.v1.SendResponse
 */
export declare type SendResponse = Message<"land.gno.gnonative.v1.SendResponse"> & {
};

/**
 * Describes the message land.gno.gnonative.v1.SendResponse.
 * Use `create(SendResponseSchema)` to create a new message.
 */
export declare const SendResponseSchema: GenMessage<SendResponse>;

/**
 * @generated from message land.gno.gnonative.v1.MsgRun
 */
export declare type MsgRun = Message<"land.gno.gnonative.v1.MsgRun"> & {
  /**
   * The code for the script package. Must have main().
   * Example: "package main\nfunc main() {\n  println(\"Hello\")\n}"
   *
   * @generated from field: string package = 1;
   */
  package: string;

  /**
   * Optional. Example: "1000ugnot"
   *
   * @generated from field: string send = 2;
   */
  send: string;
};

/**
 * Describes the message land.gno.gnonative.v1.MsgRun.
 * Use `create(MsgRunSchema)` to create a new message.
 */
export declare const MsgRunSchema: GenMessage<MsgRun>;

/**
 * @generated from message land.gno.gnonative.v1.RunRequest
 */
export declare type RunRequest = Message<"land.gno.gnonative.v1.RunRequest"> & {
  /**
   * @generated from field: string gas_fee = 1;
   */
  gasFee: string;

  /**
   * @generated from field: sint64 gas_wanted = 2;
   */
  gasWanted: bigint;

  /**
   * Memo is optional
   *
   * @generated from field: string memo = 3;
   */
  memo: string;

  /**
   * If CallerAddress is empty then get it from the active account
   *
   * @generated from field: bytes caller_address = 4;
   */
  callerAddress: Uint8Array;

  /**
   * list of run operations to make in one transaction
   *
   * @generated from field: repeated land.gno.gnonative.v1.MsgRun msgs = 5 [json_name = "Msgs"];
   */
  msgs: MsgRun[];
};

/**
 * Describes the message land.gno.gnonative.v1.RunRequest.
 * Use `create(RunRequestSchema)` to create a new message.
 */
export declare const RunRequestSchema: GenMessage<RunRequest>;

/**
 * @generated from message land.gno.gnonative.v1.RunResponse
 */
export declare type RunResponse = Message<"land.gno.gnonative.v1.RunResponse"> & {
  /**
   * The "console" output from the run
   *
   * @generated from field: string result = 1;
   */
  result: string;
};

/**
 * Describes the message land.gno.gnonative.v1.RunResponse.
 * Use `create(RunResponseSchema)` to create a new message.
 */
export declare const RunResponseSchema: GenMessage<RunResponse>;

/**
 * @generated from message land.gno.gnonative.v1.MakeTxResponse
 */
export declare type MakeTxResponse = Message<"land.gno.gnonative.v1.MakeTxResponse"> & {
  /**
   * The JSON encoding of the unsigned transaction
   *
   * @generated from field: string tx_json = 1;
   */
  txJson: string;
};

/**
 * Describes the message land.gno.gnonative.v1.MakeTxResponse.
 * Use `create(MakeTxResponseSchema)` to create a new message.
 */
export declare const MakeTxResponseSchema: GenMessage<MakeTxResponse>;

/**
 * @generated from message land.gno.gnonative.v1.SignTxRequest
 */
export declare type SignTxRequest = Message<"land.gno.gnonative.v1.SignTxRequest"> & {
  /**
   * The JSON encoding of the unsigned transaction (from MakeCallTx, etc.)
   *
   * @generated from field: string tx_json = 1;
   */
  txJson: string;

  /**
   * The signer's account number on the blockchain. If 0 then query the blockchain for the value.
   *
   * @generated from field: uint64 account_number = 2;
   */
  accountNumber: bigint;

  /**
   * The sequence number of the signer's transactions on the blockchain. If 0 then query the blockchain for the value.
   *
   * @generated from field: uint64 sequence_number = 3;
   */
  sequenceNumber: bigint;
};

/**
 * Describes the message land.gno.gnonative.v1.SignTxRequest.
 * Use `create(SignTxRequestSchema)` to create a new message.
 */
export declare const SignTxRequestSchema: GenMessage<SignTxRequest>;

/**
 * @generated from message land.gno.gnonative.v1.SignTxResponse
 */
export declare type SignTxResponse = Message<"land.gno.gnonative.v1.SignTxResponse"> & {
  /**
   * The JSON encoding of the signed transaction (to use in BroadcastTx)
   *
   * @generated from field: string signed_tx_json = 1 [json_name = "tx_json"];
   */
  signedTxJson: string;
};

/**
 * Describes the message land.gno.gnonative.v1.SignTxResponse.
 * Use `create(SignTxResponseSchema)` to create a new message.
 */
export declare const SignTxResponseSchema: GenMessage<SignTxResponse>;

/**
 * @generated from message land.gno.gnonative.v1.BroadcastTxCommitRequest
 */
export declare type BroadcastTxCommitRequest = Message<"land.gno.gnonative.v1.BroadcastTxCommitRequest"> & {
  /**
   * The JSON encoding of the signed transaction (from SignTx)
   *
   * @generated from field: string signed_tx_json = 1 [json_name = "tx_json"];
   */
  signedTxJson: string;
};

/**
 * Describes the message land.gno.gnonative.v1.BroadcastTxCommitRequest.
 * Use `create(BroadcastTxCommitRequestSchema)` to create a new message.
 */
export declare const BroadcastTxCommitRequestSchema: GenMessage<BroadcastTxCommitRequest>;

/**
 * @generated from message land.gno.gnonative.v1.BroadcastTxCommitResponse
 */
export declare type BroadcastTxCommitResponse = Message<"land.gno.gnonative.v1.BroadcastTxCommitResponse"> & {
  /**
   * @generated from field: bytes result = 1;
   */
  result: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.BroadcastTxCommitResponse.
 * Use `create(BroadcastTxCommitResponseSchema)` to create a new message.
 */
export declare const BroadcastTxCommitResponseSchema: GenMessage<BroadcastTxCommitResponse>;

/**
 * @generated from message land.gno.gnonative.v1.AddressToBech32Request
 */
export declare type AddressToBech32Request = Message<"land.gno.gnonative.v1.AddressToBech32Request"> & {
  /**
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.AddressToBech32Request.
 * Use `create(AddressToBech32RequestSchema)` to create a new message.
 */
export declare const AddressToBech32RequestSchema: GenMessage<AddressToBech32Request>;

/**
 * @generated from message land.gno.gnonative.v1.AddressToBech32Response
 */
export declare type AddressToBech32Response = Message<"land.gno.gnonative.v1.AddressToBech32Response"> & {
  /**
   * @generated from field: string bech32_address = 1;
   */
  bech32Address: string;
};

/**
 * Describes the message land.gno.gnonative.v1.AddressToBech32Response.
 * Use `create(AddressToBech32ResponseSchema)` to create a new message.
 */
export declare const AddressToBech32ResponseSchema: GenMessage<AddressToBech32Response>;

/**
 * @generated from message land.gno.gnonative.v1.AddressFromBech32Request
 */
export declare type AddressFromBech32Request = Message<"land.gno.gnonative.v1.AddressFromBech32Request"> & {
  /**
   * @generated from field: string bech32_address = 1;
   */
  bech32Address: string;
};

/**
 * Describes the message land.gno.gnonative.v1.AddressFromBech32Request.
 * Use `create(AddressFromBech32RequestSchema)` to create a new message.
 */
export declare const AddressFromBech32RequestSchema: GenMessage<AddressFromBech32Request>;

/**
 * @generated from message land.gno.gnonative.v1.AddressFromBech32Response
 */
export declare type AddressFromBech32Response = Message<"land.gno.gnonative.v1.AddressFromBech32Response"> & {
  /**
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.AddressFromBech32Response.
 * Use `create(AddressFromBech32ResponseSchema)` to create a new message.
 */
export declare const AddressFromBech32ResponseSchema: GenMessage<AddressFromBech32Response>;

/**
 * @generated from message land.gno.gnonative.v1.AddressFromMnemonicRequest
 */
export declare type AddressFromMnemonicRequest = Message<"land.gno.gnonative.v1.AddressFromMnemonicRequest"> & {
  /**
   * @generated from field: string mnemonic = 1;
   */
  mnemonic: string;
};

/**
 * Describes the message land.gno.gnonative.v1.AddressFromMnemonicRequest.
 * Use `create(AddressFromMnemonicRequestSchema)` to create a new message.
 */
export declare const AddressFromMnemonicRequestSchema: GenMessage<AddressFromMnemonicRequest>;

/**
 * @generated from message land.gno.gnonative.v1.AddressFromMnemonicResponse
 */
export declare type AddressFromMnemonicResponse = Message<"land.gno.gnonative.v1.AddressFromMnemonicResponse"> & {
  /**
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;
};

/**
 * Describes the message land.gno.gnonative.v1.AddressFromMnemonicResponse.
 * Use `create(AddressFromMnemonicResponseSchema)` to create a new message.
 */
export declare const AddressFromMnemonicResponseSchema: GenMessage<AddressFromMnemonicResponse>;

/**
 * @generated from message land.gno.gnonative.v1.HelloRequest
 */
export declare type HelloRequest = Message<"land.gno.gnonative.v1.HelloRequest"> & {
  /**
   * @generated from field: string name = 1 [json_name = "Name"];
   */
  name: string;
};

/**
 * Describes the message land.gno.gnonative.v1.HelloRequest.
 * Use `create(HelloRequestSchema)` to create a new message.
 */
export declare const HelloRequestSchema: GenMessage<HelloRequest>;

/**
 * @generated from message land.gno.gnonative.v1.HelloResponse
 */
export declare type HelloResponse = Message<"land.gno.gnonative.v1.HelloResponse"> & {
  /**
   * @generated from field: string greeting = 1 [json_name = "Greeting"];
   */
  greeting: string;
};

/**
 * Describes the message land.gno.gnonative.v1.HelloResponse.
 * Use `create(HelloResponseSchema)` to create a new message.
 */
export declare const HelloResponseSchema: GenMessage<HelloResponse>;

/**
 * @generated from message land.gno.gnonative.v1.HelloStreamRequest
 */
export declare type HelloStreamRequest = Message<"land.gno.gnonative.v1.HelloStreamRequest"> & {
  /**
   * @generated from field: string name = 1 [json_name = "Name"];
   */
  name: string;
};

/**
 * Describes the message land.gno.gnonative.v1.HelloStreamRequest.
 * Use `create(HelloStreamRequestSchema)` to create a new message.
 */
export declare const HelloStreamRequestSchema: GenMessage<HelloStreamRequest>;

/**
 * @generated from message land.gno.gnonative.v1.HelloStreamResponse
 */
export declare type HelloStreamResponse = Message<"land.gno.gnonative.v1.HelloStreamResponse"> & {
  /**
   * @generated from field: string greeting = 1 [json_name = "Greeting"];
   */
  greeting: string;
};

/**
 * Describes the message land.gno.gnonative.v1.HelloStreamResponse.
 * Use `create(HelloStreamResponseSchema)` to create a new message.
 */
export declare const HelloStreamResponseSchema: GenMessage<HelloStreamResponse>;

