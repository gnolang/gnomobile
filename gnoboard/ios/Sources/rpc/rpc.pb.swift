// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rpc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The ErrCode enum defines errors for gRPC API functions. These are converted
/// from the Go error types returned by gnoclient.
public enum Land_Gno_Gnomobile_V1_ErrCode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// default value, should never be set manually
  case undefined // = 0

  /// indicates that you plan to create an error later
  case todo // = 1

  /// indicates that a method is not implemented yet
  case errNotImplemented // = 2

  /// indicates an unknown error (without Code), i.e. in gRPC
  case errInternal // = 3
  case errInvalidInput // = 100
  case errBridgeInterrupted // = 101
  case errMissingInput // = 102
  case errSerialization // = 103
  case errDeserialization // = 104
  case errCryptoKeyTypeUnknown // = 105
  case errCryptoKeyNotFound // = 106
  case errNoActiveAccount // = 107
  case errRunGrpcserver // = 108
  case errDecryptionFailed // = 109

  /// indicates that the address is unknown on the blockchain
  case errUnknownAddress // = 110
  case UNRECOGNIZED(Int)

  public init() {
    self = .undefined
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .todo
    case 2: self = .errNotImplemented
    case 3: self = .errInternal
    case 100: self = .errInvalidInput
    case 101: self = .errBridgeInterrupted
    case 102: self = .errMissingInput
    case 103: self = .errSerialization
    case 104: self = .errDeserialization
    case 105: self = .errCryptoKeyTypeUnknown
    case 106: self = .errCryptoKeyNotFound
    case 107: self = .errNoActiveAccount
    case 108: self = .errRunGrpcserver
    case 109: self = .errDecryptionFailed
    case 110: self = .errUnknownAddress
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .todo: return 1
    case .errNotImplemented: return 2
    case .errInternal: return 3
    case .errInvalidInput: return 100
    case .errBridgeInterrupted: return 101
    case .errMissingInput: return 102
    case .errSerialization: return 103
    case .errDeserialization: return 104
    case .errCryptoKeyTypeUnknown: return 105
    case .errCryptoKeyNotFound: return 106
    case .errNoActiveAccount: return 107
    case .errRunGrpcserver: return 108
    case .errDecryptionFailed: return 109
    case .errUnknownAddress: return 110
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Land_Gno_Gnomobile_V1_ErrCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Land_Gno_Gnomobile_V1_ErrCode] = [
    .undefined,
    .todo,
    .errNotImplemented,
    .errInternal,
    .errInvalidInput,
    .errBridgeInterrupted,
    .errMissingInput,
    .errSerialization,
    .errDeserialization,
    .errCryptoKeyTypeUnknown,
    .errCryptoKeyNotFound,
    .errNoActiveAccount,
    .errRunGrpcserver,
    .errDecryptionFailed,
    .errUnknownAddress,
  ]
}

#endif  // swift(>=4.2)

public struct Land_Gno_Gnomobile_V1_ErrDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var codes: [Land_Gno_Gnomobile_V1_ErrCode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Land_Gno_Gnomobile_V1_ErrCode: @unchecked Sendable {}
extension Land_Gno_Gnomobile_V1_ErrDetails: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "land.gno.gnomobile.v1"

extension Land_Gno_Gnomobile_V1_ErrCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Undefined"),
    1: .same(proto: "TODO"),
    2: .same(proto: "ErrNotImplemented"),
    3: .same(proto: "ErrInternal"),
    100: .same(proto: "ErrInvalidInput"),
    101: .same(proto: "ErrBridgeInterrupted"),
    102: .same(proto: "ErrMissingInput"),
    103: .same(proto: "ErrSerialization"),
    104: .same(proto: "ErrDeserialization"),
    105: .same(proto: "ErrCryptoKeyTypeUnknown"),
    106: .same(proto: "ErrCryptoKeyNotFound"),
    107: .same(proto: "ErrNoActiveAccount"),
    108: .same(proto: "ErrRunGRPCServer"),
    109: .same(proto: "ErrDecryptionFailed"),
    110: .same(proto: "ErrUnknownAddress"),
  ]
}

extension Land_Gno_Gnomobile_V1_ErrDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrDetails"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.codes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.codes.isEmpty {
      try visitor.visitPackedEnumField(value: self.codes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Land_Gno_Gnomobile_V1_ErrDetails, rhs: Land_Gno_Gnomobile_V1_ErrDetails) -> Bool {
    if lhs.codes != rhs.codes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
