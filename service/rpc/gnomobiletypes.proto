syntax = "proto3";
package land.gno.gnomobile.v1;

option go_package = "github.com/gnolang/gnomobile/service/rpc";

// messages
message SetRemoteRequest {
	string remote = 1;
}

message SetRemoteResponse {
}

message SetChainIDRequest {
	string chain_id = 1;
}

message SetChainIDResponse {
}

message SetPasswordRequest {
	string password = 1;
}

message SetPasswordResponse {
}

message GenerateRecoveryPhraseRequest {
}

message GenerateRecoveryPhraseResponse {
	string phrase = 1;
}

message KeyInfo {
	// 0: local, 1: ledger, 2: offline, 3: multi
	uint32 type = 1;
	string name = 2;
	bytes pub_key = 3;
	bytes address = 4;
}

// Coin holds some amount of one currency.
// A negative amount is invalid.
message Coin {
	string denom = 1;
	sint64 amount = 2;
}

message BaseAccount {
	bytes address = 1;
	repeated Coin coins = 2;
	bytes pub_key = 3;
	uint64 account_number = 4;
	uint64 sequence = 5;
}

message ListKeyInfoRequest {
}

message ListKeyInfoResponse {
	repeated KeyInfo keys = 1;
}

message CreateAccountRequest {
	string name_or_bech32 = 1;
	string mnemonic = 2;
	string bip39_passwd = 3;
	string password = 4;
	uint32 account = 5;
	uint32 index = 6;
}

message CreateAccountResponse {
	KeyInfo key = 1;
}

message SelectAccountRequest {
	string name_or_bech32 = 1;
}

message SelectAccountResponse {
	KeyInfo key = 1;
}

message GetActiveAccountRequest {
}

message GetActiveAccountResponse {
	KeyInfo key = 1;
}

message QueryAccountRequest {
	bytes address = 1;
}

message QueryAccountResponse {
	BaseAccount account_info = 1;
}

message DeleteAccountRequest {
	string name_or_bech32 = 1;
	string password = 2;
	bool skip_password = 3;
}

message DeleteAccountResponse {
}

message QueryRequest {
	// Example: "vm/qrender"
	string path = 1;
	// Example: "gno.land/r/demo/boards\ntestboard"
	bytes data = 2;
}

message QueryResponse {
	bytes result = 1;
}

message RenderRequest {
	// Example: "gno.land/r/demo/boards"
	string package_path = 1;
	// Example: "testboard/1"
	string args = 2;
}

message RenderResponse {
	// The Render function result (typically markdown)
	string result = 1;
}

message QEvalRequest {
	// Example: "gno.land/r/demo/boards"
	string package_path = 1;
	// Example: "GetBoardIDFromName(\"testboard\")"
	string expression = 2;
}

message QEvalResponse {
	// A typed expression like "(1 gno.land/r/demo/boards.BoardID)\n(true bool)"
	string result = 1;
}

message CallRequest {
	// Example: "gno.land/r/demo/boards"
	string package_path = 1;
	// Example: "CreateReply"
	string fnc = 2;
	// list of arguments specific to the function
	repeated string args = 3;
	string gas_fee = 4;
	sint64 gas_wanted = 5;
	string send = 6;
	string memo = 7;
}

message CallResponse {
	bytes result = 1;
}

message AddressToBech32Request {
	bytes address = 1;
}

message AddressToBech32Response {
	string bech32_address = 1;
}

message AddressFromBech32Request {
	string bech32_address = 1;
}

message AddressFromBech32Response {
	bytes address = 1;
}

message HelloRequest {
	string name = 1;
}

message HelloResponse {
	string greeting = 1;
}

message HelloStreamRequest {
	string name = 1;
}

message HelloStreamResponse {
	string greeting = 1;
}